// Generated by gencpp from file unitree_motor_ctrl/motor_send.msg
// DO NOT EDIT!


#ifndef UNITREE_MOTOR_CTRL_MESSAGE_MOTOR_SEND_H
#define UNITREE_MOTOR_CTRL_MESSAGE_MOTOR_SEND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_motor_ctrl
{
template <class ContainerAllocator>
struct motor_send_
{
  typedef motor_send_<ContainerAllocator> Type;

  motor_send_()
    : mode1(0)
    , tor1(0.0)
    , wrate1(0.0)
    , pos1(0.0)
    , kp1(0.0)
    , kw1(0.0)
    , mode2(0)
    , tor2(0.0)
    , wrate2(0.0)
    , pos2(0.0)
    , kp2(0.0)
    , kw2(0.0)  {
    }
  motor_send_(const ContainerAllocator& _alloc)
    : mode1(0)
    , tor1(0.0)
    , wrate1(0.0)
    , pos1(0.0)
    , kp1(0.0)
    , kw1(0.0)
    , mode2(0)
    , tor2(0.0)
    , wrate2(0.0)
    , pos2(0.0)
    , kp2(0.0)
    , kw2(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _mode1_type;
  _mode1_type mode1;

   typedef double _tor1_type;
  _tor1_type tor1;

   typedef double _wrate1_type;
  _wrate1_type wrate1;

   typedef double _pos1_type;
  _pos1_type pos1;

   typedef double _kp1_type;
  _kp1_type kp1;

   typedef double _kw1_type;
  _kw1_type kw1;

   typedef int16_t _mode2_type;
  _mode2_type mode2;

   typedef double _tor2_type;
  _tor2_type tor2;

   typedef double _wrate2_type;
  _wrate2_type wrate2;

   typedef double _pos2_type;
  _pos2_type pos2;

   typedef double _kp2_type;
  _kp2_type kp2;

   typedef double _kw2_type;
  _kw2_type kw2;





  typedef boost::shared_ptr< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> const> ConstPtr;

}; // struct motor_send_

typedef ::unitree_motor_ctrl::motor_send_<std::allocator<void> > motor_send;

typedef boost::shared_ptr< ::unitree_motor_ctrl::motor_send > motor_sendPtr;
typedef boost::shared_ptr< ::unitree_motor_ctrl::motor_send const> motor_sendConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_motor_ctrl::motor_send_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_motor_ctrl::motor_send_<ContainerAllocator1> & lhs, const ::unitree_motor_ctrl::motor_send_<ContainerAllocator2> & rhs)
{
  return lhs.mode1 == rhs.mode1 &&
    lhs.tor1 == rhs.tor1 &&
    lhs.wrate1 == rhs.wrate1 &&
    lhs.pos1 == rhs.pos1 &&
    lhs.kp1 == rhs.kp1 &&
    lhs.kw1 == rhs.kw1 &&
    lhs.mode2 == rhs.mode2 &&
    lhs.tor2 == rhs.tor2 &&
    lhs.wrate2 == rhs.wrate2 &&
    lhs.pos2 == rhs.pos2 &&
    lhs.kp2 == rhs.kp2 &&
    lhs.kw2 == rhs.kw2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_motor_ctrl::motor_send_<ContainerAllocator1> & lhs, const ::unitree_motor_ctrl::motor_send_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_motor_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41d15d8ef8540fc825ea4ec09ea2464d";
  }

  static const char* value(const ::unitree_motor_ctrl::motor_send_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41d15d8ef8540fc8ULL;
  static const uint64_t static_value2 = 0x25ea4ec09ea2464dULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_motor_ctrl/motor_send";
  }

  static const char* value(const ::unitree_motor_ctrl::motor_send_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int16 mode1\n"
"float64 tor1\n"
"float64 wrate1\n"
"float64 pos1\n"
"float64 kp1\n"
"float64 kw1\n"
"\n"
"int16 mode2\n"
"float64 tor2\n"
"float64 wrate2\n"
"float64 pos2\n"
"float64 kp2\n"
"float64 kw2\n"
"\n"
;
  }

  static const char* value(const ::unitree_motor_ctrl::motor_send_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode1);
      stream.next(m.tor1);
      stream.next(m.wrate1);
      stream.next(m.pos1);
      stream.next(m.kp1);
      stream.next(m.kw1);
      stream.next(m.mode2);
      stream.next(m.tor2);
      stream.next(m.wrate2);
      stream.next(m.pos2);
      stream.next(m.kp2);
      stream.next(m.kw2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_send_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_motor_ctrl::motor_send_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_motor_ctrl::motor_send_<ContainerAllocator>& v)
  {
    s << indent << "mode1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mode1);
    s << indent << "tor1: ";
    Printer<double>::stream(s, indent + "  ", v.tor1);
    s << indent << "wrate1: ";
    Printer<double>::stream(s, indent + "  ", v.wrate1);
    s << indent << "pos1: ";
    Printer<double>::stream(s, indent + "  ", v.pos1);
    s << indent << "kp1: ";
    Printer<double>::stream(s, indent + "  ", v.kp1);
    s << indent << "kw1: ";
    Printer<double>::stream(s, indent + "  ", v.kw1);
    s << indent << "mode2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.mode2);
    s << indent << "tor2: ";
    Printer<double>::stream(s, indent + "  ", v.tor2);
    s << indent << "wrate2: ";
    Printer<double>::stream(s, indent + "  ", v.wrate2);
    s << indent << "pos2: ";
    Printer<double>::stream(s, indent + "  ", v.pos2);
    s << indent << "kp2: ";
    Printer<double>::stream(s, indent + "  ", v.kp2);
    s << indent << "kw2: ";
    Printer<double>::stream(s, indent + "  ", v.kw2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_MOTOR_CTRL_MESSAGE_MOTOR_SEND_H
