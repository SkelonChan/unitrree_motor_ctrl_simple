// Generated by gencpp from file unitree_motor_ctrl/motor_send2.msg
// DO NOT EDIT!


#ifndef UNITREE_MOTOR_CTRL_MESSAGE_MOTOR_SEND2_H
#define UNITREE_MOTOR_CTRL_MESSAGE_MOTOR_SEND2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace unitree_motor_ctrl
{
template <class ContainerAllocator>
struct motor_send2_
{
  typedef motor_send2_<ContainerAllocator> Type;

  motor_send2_()
    : time1(0.0)
    , speed1(0.0)
    , time2(0.0)
    , speed2(0.0)  {
    }
  motor_send2_(const ContainerAllocator& _alloc)
    : time1(0.0)
    , speed1(0.0)
    , time2(0.0)
    , speed2(0.0)  {
  (void)_alloc;
    }



   typedef double _time1_type;
  _time1_type time1;

   typedef double _speed1_type;
  _speed1_type speed1;

   typedef double _time2_type;
  _time2_type time2;

   typedef double _speed2_type;
  _speed2_type speed2;





  typedef boost::shared_ptr< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> const> ConstPtr;

}; // struct motor_send2_

typedef ::unitree_motor_ctrl::motor_send2_<std::allocator<void> > motor_send2;

typedef boost::shared_ptr< ::unitree_motor_ctrl::motor_send2 > motor_send2Ptr;
typedef boost::shared_ptr< ::unitree_motor_ctrl::motor_send2 const> motor_send2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::unitree_motor_ctrl::motor_send2_<ContainerAllocator1> & lhs, const ::unitree_motor_ctrl::motor_send2_<ContainerAllocator2> & rhs)
{
  return lhs.time1 == rhs.time1 &&
    lhs.speed1 == rhs.speed1 &&
    lhs.time2 == rhs.time2 &&
    lhs.speed2 == rhs.speed2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::unitree_motor_ctrl::motor_send2_<ContainerAllocator1> & lhs, const ::unitree_motor_ctrl::motor_send2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace unitree_motor_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28bf7e0e00c237904489fc6bc62fd0f8";
  }

  static const char* value(const ::unitree_motor_ctrl::motor_send2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28bf7e0e00c23790ULL;
  static const uint64_t static_value2 = 0x4489fc6bc62fd0f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "unitree_motor_ctrl/motor_send2";
  }

  static const char* value(const ::unitree_motor_ctrl::motor_send2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time1\n"
"float64 speed1\n"
"\n"
"float64 time2\n"
"float64 speed2\n"
;
  }

  static const char* value(const ::unitree_motor_ctrl::motor_send2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time1);
      stream.next(m.speed1);
      stream.next(m.time2);
      stream.next(m.speed2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_send2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::unitree_motor_ctrl::motor_send2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::unitree_motor_ctrl::motor_send2_<ContainerAllocator>& v)
  {
    s << indent << "time1: ";
    Printer<double>::stream(s, indent + "  ", v.time1);
    s << indent << "speed1: ";
    Printer<double>::stream(s, indent + "  ", v.speed1);
    s << indent << "time2: ";
    Printer<double>::stream(s, indent + "  ", v.time2);
    s << indent << "speed2: ";
    Printer<double>::stream(s, indent + "  ", v.speed2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNITREE_MOTOR_CTRL_MESSAGE_MOTOR_SEND2_H
